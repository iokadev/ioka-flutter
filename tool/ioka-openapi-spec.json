{
  "openapi": "3.0.3",
  "info": {
    "title": "ioka Payments API",
    "version": "2.8.0",
    "description": "## Описание\nioka API работает поверх HTTP-протокола. Мы используем REST архитектуру, схема описывается в соответствии с [OpenAPI](https://openapis.org). Коды возврата описываются соответствующими HTTP-статусами. Платформа принимает и возвращает JSON-структуры в HTTP body.\n### Тип содержимого и кодировка\nЛюбой запрос к API должен выполняться в кодировке UTF-8 и с указанием содержимого в формате JSON.\n```\n Content-Type: application/json; charset=utf-8\n```\n### Формат дат\nПлатформа принимает значения date-time во временной зоне UTC+0 в формате, описанном в RFC 3339, например:\n```\n\"2019-08-24T14:15:22\"\n```\n",
    "contact": {
      "name": "Поддержка",
      "email": "support@ioka.kz",
      "url": "https://ioka.kz"
    },
    "x-logo": {
      "url": "./images/dark-text-logo.svg",
      "backgroundColor": "#FFFFFF",
      "altText": "ioka logo"
    }
  },
  "servers": [
    {
      "url": "https://stage-api.ioka.kz",
      "description": "Тестовый API"
    },
    {
      "url": "https://api.ioka.kz",
      "description": "Боевой API"
    }
  ],
  "paths": {
    "/v2/payment-methods": {
      "post": {
        "tags": [
          "payment-methods"
        ],
        "summary": "CreatePaymentMethod",
        "description": "Создание нового одноразового токена платежного средства, предоставленного плательщиком, а также новой уникальной платежной сессии. Токен платежного средства и идентификатор сессии необходимы для создания платежа по заказу. Токен имеет ограниченное время жизни. Данный метод иcпользуется внутренней формой сбора карточных данных (Checkout UI). При наличии сертификата PCI DSS Level 3, магазины также могут использовать этот метод.",
        "operationId": "CreatePaymentMethod",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Токен и сессия созданы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodOut"
                }
              }
            }
          }
        }
      }
    },
    "/v2/payment-methods/{order_id}/apple-pay-session": {
      "post": {
        "tags": [
          "payment-methods"
        ],
        "summary": "StartApplePayPaymentSession",
        "description": "Создание нового одноразового токена платежного средства, предоставленного плательщиком, а также новой уникальной платежной сессии. Токен платежного средства и идентификатор сессии необходимы для создания платежа по заказу. Токен имеет ограниченное время жизни.",
        "operationId": "StartApplePayPaymentSession",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplePayIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Сессия верифицированна",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplePayOut"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "CreateOrder",
        "description": "Создание нового заказа.",
        "operationId": "CreateOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Заказ создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderAndAccessToken"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Заказ уже создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "GetOrders",
        "description": "Поиск заказов по фильтрам.",
        "operationId": "GetOrders",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Номер запрашиваемой страницы",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Количество запрашиваемых строк",
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string",
              "format": "date-time"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string",
              "format": "date-time"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "order_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Внешний идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "external_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            },
            "name": "order_status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AmountCategory"
            },
            "name": "amount_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Фискированная сумма заказа",
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            "name": "fixed_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Минимальная сумма заказа",
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            "name": "min_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Максимальная сумма заказа",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "max_amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Список заказов",
            "headers": {
              "x-count": {
                "schema": {
                  "description": "Общее количество заказов",
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Search Orders V2 Orders Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderOut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/orders/{order_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "GetOrderByID",
        "description": "Получение заказа по ID.",
        "operationId": "GetOrderByID",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Данные заказа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Заказ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{order_id}/capture": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "CaptureOrder",
        "description": "Полное или частичное списание авторизованного платежа заказа. Идентичен методу [CapturePayment](#operation/CapturePayment)",
        "operationId": "CaptureOrder",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCapture"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Данные платежа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPayment"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Заказ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/orders/{order_id}/cancel": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "CancelOrder",
        "description": "Отмена авторизованного платежа заказа. Идентичен методу [CancelPayment](#operation/CancelPayment)",
        "operationId": "CancelOrder",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCancel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные платежа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPayment"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Заказ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/orders/{order_id}/refunds": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "GetOrderRefunds",
        "description": "Выдача всех возвратов по списанному платежу.",
        "operationId": "GetOrderRefunds",
        "responses": {
          "200": {
            "description": "Список возвратов",
            "content": {
              "application/json": {
                "schema": {
                  "title": "refunds",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedRefund"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "RefundOrder",
        "description": "Создание нового возврата по списанному платежу. Идентичен методу [CreateRefund](#operation/CreateRefund).",
        "operationId": "RefundOrder",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Данные возврата",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedRefund"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Заказ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/orders/{order_id}/refunds/{refund_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "GetRefundByID",
        "description": "Выдача возвратов по идентификатору.",
        "operationId": "GetRefundByID",
        "responses": {
          "200": {
            "description": "Данные возврата",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedRefund"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Возврат не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/orders/{order_id}/events": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "GetOrderEvents",
        "description": "Получение истории событий по заказу.",
        "operationId": "GetOrderEvents",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "История событий по заказу",
            "content": {
              "application/json": {
                "schema": {
                  "title": "История событий по заказу",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderEventOut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Заказ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{order_id}/payments": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "GetPayments",
        "description": "Поиск платежей по фильтрам.",
        "operationId": "GetPayments",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Номер запрашиваемой страницы",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Количество запрашиваемых строк",
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "order_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Внешний идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "external_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор платежа",
              "minLength": 1,
              "type": "string"
            },
            "name": "payment_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "БИН карты",
              "pattern": "^\\d{6}$",
              "type": "string"
            },
            "name": "pan_first6",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Последние 4 цифры карты",
              "pattern": "^\\d{4}$",
              "type": "string"
            },
            "name": "pan_last4",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Адрес электронной почты плательщика",
              "type": "string"
            },
            "name": "payer_email",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Номер мобильного телефона с международным префиксом",
              "type": "string"
            },
            "name": "payer_phone",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор плательщика",
              "type": "string"
            },
            "name": "customer_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaymentStatus"
            },
            "name": "payment_status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Платежная система",
              "type": "string"
            },
            "name": "payment_system",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AmountCategory"
            },
            "name": "amount_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Фискированная сумма платежа",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "fixed_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Минимальная сумма платежа",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "min_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Максимальная сумма платежа",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "max_amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Список платежей",
            "headers": {
              "x-count": {
                "schema": {
                  "description": "Общее количество платежей",
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Search Payments V2 Orders  Order Id  Payments Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentOut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Заказ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "CreatePayment",
        "description": "Создание нового платежа по указанному заказу. Данный метод иcпользуется внутренней формой сбора карточных данных (Checkout UI). При наличии сертификата PCI DSS Level 3, магазины также могут использовать этот метод.",
        "operationId": "CreatePayment",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Платеж создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPayment"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Заказ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{order_id}/payments/card": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "CreateCardPayment",
        "description": "Создание нового платежа по указанному заказу. Данный метод используется внутренней формой сбора карточных данных (Checkout UI). При наличии сертификата PCI DSS Level 3, магазины также могут использовать этот метод.",
        "operationId": "CreateCardPayment",
        "parameters": [
          {
            "description": "Идентификатор заказа",
            "required": true,
            "schema": {
              "title": "order_id",
              "type": "string",
              "description": "Идентификатор заказа"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardPayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Платеж создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPayment"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Заказ не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{order_id}/payments/{payment_id}": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "GetPaymentByID",
        "description": "Получение платежа по ID.",
        "operationId": "GetPaymentByID",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "description": "Идентификатор платежа",
              "type": "string"
            },
            "name": "payment_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Данные платежа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPayment"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Платеж не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/orders/{order_id}/payments/{payment_id}/capture": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "CapturePayment",
        "description": "Полное или частичное списание авторизованного платежа.",
        "operationId": "CapturePayment",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "description": "Идентификатор платежа",
              "type": "string"
            },
            "name": "payment_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCapture"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Данные платежа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPayment"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Платеж не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/orders/{order_id}/payments/{payment_id}/cancel": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "CancelPayment",
        "description": "Отмена авторизованного платежа.",
        "operationId": "CancelPayment",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "description": "Идентификатор платежа",
              "type": "string"
            },
            "name": "payment_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCancel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Данные платежа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPayment"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Платеж не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/orders/{order_id}/payments/{payment_id}/refunds": {
      "get": {
        "tags": [
          "refunds"
        ],
        "summary": "GetRefunds",
        "description": "Поиск возвратов по фильтрам.",
        "operationId": "GetRefunds",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Номер запрашиваемой страницы",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Количество запрашиваемых строк",
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "order_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор платежа",
              "minLength": 1,
              "type": "string"
            },
            "name": "payment_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/RefundStatus"
            },
            "name": "refund_status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AmountCategory"
            },
            "name": "amount_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Фискированная сумма возврата",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "fixed_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Минимальная сумма возврата",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "min_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Максимальная сумма возврата",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "max_amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Список возвратов",
            "headers": {
              "x-count": {
                "schema": {
                  "description": "Общее количество возвратов",
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Search Refunds V2 Orders  Order Id  Payments  Payment Id  Refunds Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RefundOut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Платеж не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "post": {
        "tags": [
          "refunds"
        ],
        "summary": "CreateRefund",
        "description": "Создание нового возврата по списанному платежу.",
        "operationId": "CreateRefund",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор заказа",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "description": "Идентификатор платежа",
              "type": "string"
            },
            "name": "payment_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Данные возврата",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedRefund"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Платеж не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/webhooks": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "GetWebhooks",
        "description": "Получение всех webhook-ов магазина.",
        "operationId": "GetWebhooks",
        "responses": {
          "200": {
            "description": "Список webhook-ов магазина",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Список webhook-ов магазина",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookOut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "CreateWebhook",
        "description": "Установка нового webhook-а.",
        "operationId": "CreateWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Webhook установлен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/webhooks/{webhook_id}": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "GetWebhookByID",
        "description": "Получение webhook-а по ID.",
        "operationId": "GetWebhookByID",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор webhook-а",
              "type": "string"
            },
            "name": "webhook_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Данные webhook-а",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Webhook не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "webhooks"
        ],
        "summary": "DeleteWebhookByID",
        "description": "Удаления webhook-а по ID.",
        "operationId": "DeleteWebhookByID",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор webhook-а",
              "type": "string"
            },
            "name": "webhook_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook удален"
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Webhook не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "webhooks"
        ],
        "summary": "UpdateWebhookByID",
        "description": "Обновление webhook-а по ID.",
        "operationId": "UpdateWebhookByID",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор webhook-а",
              "type": "string"
            },
            "name": "webhook_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Данные webhook-а",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Webhook не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/customers": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "GetCustomers",
        "description": "Получение плательщиков магазина.",
        "operationId": "GetCustomers",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Количество запрашиваемых строк",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Номер запрашиваемой страницы",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string",
              "format": "date-time"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string",
              "format": "date-time"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор плательщика",
              "minLength": 1,
              "type": "string"
            },
            "name": "customer_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Внешний идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "external_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CustomerStatus"
            },
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Список плательщиков магазина",
            "headers": {
              "x-count": {
                "schema": {
                  "description": "Общее количество плательщиков",
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedCustomer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "post": {
        "tags": [
          "customers"
        ],
        "summary": "CreateCustomer",
        "description": "Создание нового плательщика.",
        "operationId": "CreateCustomer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Плательщик создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAndAccessToken"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Ресурс не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Плательщик уже создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/customers/{customer_id}": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "GetCustomerByID",
        "description": "Получение плательщика по ID.",
        "operationId": "GetCustomerByID",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор плательщика",
              "type": "string"
            },
            "name": "customer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Данные плательщика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCustomer"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Плательщик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Customer Access Token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "customers"
        ],
        "summary": "DeleteCustomerByID",
        "description": "Удаление плательщика по ID.",
        "operationId": "DeleteCustomerByID",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор плательщика",
              "type": "string"
            },
            "name": "customer_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Плательщик удален"
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Плательщик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/customers/{customer_id}/events": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "GetCustomerEvents",
        "description": "Получение истории событий плательщика.",
        "operationId": "GetCustomerEvents",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор плательщика",
              "type": "string"
            },
            "name": "customer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "История событий плательщика",
            "content": {
              "application/json": {
                "schema": {
                  "title": "История событий плательщика",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerEventOut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Плательщик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customers/{customer_id}/bindings": {
      "post": {
        "tags": [
          "cards"
        ],
        "summary": "CreateBinding",
        "description": "Верифицировать новую карту и привязать к указанному плательщику. Данный метод используется внутренней формой сбора карточных данных (Checkout UI). При наличии сертификата PCI DSS Level 3, магазины также могут использовать этот метод.\",\n",
        "operationId": "CreateBinding",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "customer_id",
              "type": "string",
              "description": "Идентификатор плательщика"
            },
            "name": "customer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BindingCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Процесс привязки запущен.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCard"
                }
              }
            }
          }
        },
        "security": [
          {
            "Customer Access Token": []
          }
        ]
      }
    },
    "/v2/customers/{customer_id}/cards": {
      "get": {
        "tags": [
          "cards"
        ],
        "summary": "GetCards",
        "description": "Получение списка сохраненных карт по идентификатору плательщика.",
        "operationId": "GetCards",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор плательщика",
              "type": "string"
            },
            "name": "customer_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Список сохраненных карт плательщика",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Список сохраненных карт плательщика",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedCard"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Список сохраненных карт не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": [],
            "Customer Access Token": []
          }
        ]
      },
      "post": {
        "tags": [
          "cards"
        ],
        "summary": "CreateCard",
        "description": "Верифицировать новую карту и привязать к указанному плательщику. Данный метод используется внутренней формой сбора карточных данных (Checkout UI). При наличии сертификата PCI DSS Level 3, магазины также могут использовать этот метод.\",\n",
        "operationId": "CreateCard",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор плательщика",
              "type": "string"
            },
            "name": "customer_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Связка создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCard"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Плательщик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Связка уже создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customers/{customer_id}/cards/{card_id}": {
      "get": {
        "tags": [
          "cards"
        ],
        "summary": "GetCardByID",
        "description": "Получение сохраненной карты по идентификатору плательщика и карты.",
        "operationId": "GetCardByID",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор плательщика",
              "type": "string"
            },
            "name": "customer_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "description": "Идентификатор платежной карты",
              "type": "string"
            },
            "name": "card_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Данные сохраненной карты",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCard"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Сохраненная карта не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Customer Access Token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "cards"
        ],
        "summary": "DeleteCardByID",
        "description": "Удаление сохраненной карты по ID.",
        "operationId": "DeleteCardByID",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор плательщика",
              "type": "string"
            },
            "name": "customer_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "description": "Идентификатор платежной карты",
              "type": "string"
            },
            "name": "card_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Карта удалена"
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Плательщик или карта не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": [],
            "Customer Access Token": []
          }
        ]
      }
    },
    "/v2/subscriptions": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "GetSubscriptions",
        "description": "Получение списка подписок магазина.",
        "operationId": "GetSubscriptions",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Номер запрашиваемой страницы",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Количество запрашиваемых строк",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string",
              "format": "date-time"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string",
              "format": "date-time"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор подписки",
              "minLength": 1,
              "type": "string"
            },
            "name": "subscription_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "БИН карты",
              "pattern": "^\\d{6}$",
              "type": "string"
            },
            "name": "pan_first6",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Последние 4 цифры карты",
              "pattern": "^\\d{4}$",
              "type": "string"
            },
            "name": "pan_last4",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ScheduleStatusEnum"
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Время и дата следующего списания",
              "type": "string",
              "format": "date-time"
            },
            "name": "next_pay",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Шаг периодичности списания",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "step",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ScheduleUnitEnum"
            },
            "name": "unit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AmountCategory"
            },
            "name": "amount_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Фискированная сумма подписки",
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            "name": "fixed_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Минимальная сумма подписки",
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            "name": "min_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Максимальная сумма подписки",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "max_amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Список подписок",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Subscriptions V2 Subscriptions Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionOut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Подписки не найдены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "CreateSubscription",
        "description": "Создание новой подписки.",
        "operationId": "CreateSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Подписка создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Страница не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/subscriptions/{subscription_id}": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "GetSubscriptionByID",
        "description": "Получение подписки по ID.",
        "operationId": "GetSubscriptionByID",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор подписки",
              "type": "string"
            },
            "name": "subscription_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Данные подписки",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Подписка не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "ChangeSubscriptionStatus",
        "description": "Изменения статуса подписки по ID.",
        "operationId": "ChangeSubscriptionStatus",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор подписки",
              "type": "string"
            },
            "name": "subscription_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionStatusIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Статус подписки изменен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Подписка не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "subscriptions"
        ],
        "summary": "UpdateSubscription",
        "description": "Изменения информации подписки по ID.",
        "operationId": "UpdateSubscription",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор подписки",
              "type": "string"
            },
            "name": "subscription_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Подписка изменена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Подписка не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/subscriptions/{subscription_id}/payments": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "GetSubscriptionPayments",
        "description": "Список платежей подписки по ID.",
        "operationId": "GetSubscriptionPayments",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор подписки",
              "type": "string"
            },
            "name": "subscription_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaymentStatus"
            },
            "name": "payment_status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Число первых строк, необрабатываемых запросом",
              "minimum": 0.0,
              "type": "integer",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Предел количества строк, возвращаемых запросом",
              "maximum": 50.0,
              "minimum": 0.0,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Данные платежа подписки",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Subscription Payments V2 Subscriptions  Subscription Id  Payments Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedPayment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Подписка не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/search/orders": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "SearchOrders",
        "description": "Поиск заказов по фильтрам.",
        "operationId": "SearchOrders",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Номер запрашиваемой страницы",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Количество запрашиваемых строк",
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "order_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Внешний идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "external_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            },
            "name": "order_status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AmountCategory"
            },
            "name": "amount_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Фискированная сумма заказа",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "fixed_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Минимальная сумма заказа",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "min_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Максимальная сумма заказа",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "max_amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Список заказов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrderOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Заказы не найдены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/search/payments": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "SearchPayments",
        "description": "Поиск платежей по фильтрам.",
        "operationId": "SearchPayments",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Номер запрашиваемой страницы",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Количество запрашиваемых строк",
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "order_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Внешний идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "external_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "БИН карты",
              "pattern": "^\\d{6}$",
              "type": "string"
            },
            "name": "pan_first6",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Последние 4 цифры карты",
              "pattern": "^\\d{4}$",
              "type": "string"
            },
            "name": "pan_last4",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Адрес электронной почты плательщика",
              "type": "string"
            },
            "name": "payer_email",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Номер мобильного телефона с международным префиксом",
              "type": "string"
            },
            "name": "payer_phone",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор плательщика",
              "type": "string"
            },
            "name": "customer_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaymentStatus"
            },
            "name": "payment_status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Платежная система",
              "type": "string"
            },
            "name": "payment_system",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AmountCategory"
            },
            "name": "amount_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Фискированная сумма платежа",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "fixed_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Минимальная сумма платежа",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "min_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Максимальная сумма платежа",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "max_amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Список платежей",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPaymentOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Платежи не найдены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/search/refunds": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "SearchRefunds",
        "description": "Поиск возвратов по фильтрам.",
        "operationId": "SearchRefunds",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Номер запрашиваемой страницы",
              "minimum": 1,
              "type": "integer",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Количество запрашиваемых строк",
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Идентификатор заказа",
              "minLength": 1,
              "type": "string"
            },
            "name": "order_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/RefundStatus"
            },
            "name": "refund_status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AmountCategory"
            },
            "name": "amount_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Фискированная сумма возврата",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "fixed_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Минимальная сумма возврата",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "min_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Максимальная сумма возврата",
              "exclusiveMinimum": 1,
              "type": "integer"
            },
            "name": "max_amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Список возвратов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRefundOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Возвраты не найдены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/export/orders": {
      "get": {
        "tags": [
          "export"
        ],
        "summary": "ExportOrders",
        "description": "Выгрузка отчета по заказам",
        "operationId": "ExportOrders",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            },
            "name": "order_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Файл с найденными заказами",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Файл не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/export/payments": {
      "get": {
        "tags": [
          "export"
        ],
        "summary": "ExportPayments",
        "description": "Выгрузка платежей по фильтрам",
        "operationId": "ExportPayments",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaymentStatus"
            },
            "name": "payment_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Файл с найденными платежами",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Страница не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/export/refunds": {
      "get": {
        "tags": [
          "export"
        ],
        "summary": "ExportRefunds",
        "description": "Выгрузка возвратов по фильтрам",
        "operationId": "ExportRefunds",
        "parameters": [
          {
            "required": false,
            "schema": {
              "description": "Конец временного отрезка",
              "type": "string"
            },
            "name": "to_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "description": "Начало временного отрезка",
              "type": "string"
            },
            "name": "from_dt",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateCategory"
            },
            "name": "date_category",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/RefundStatus"
            },
            "name": "refund_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Файл с найденными возвратами",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Страница не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/v2/brands": {
      "get": {
        "tags": [
          "brands"
        ],
        "summary": "GetBrand",
        "description": "Определение платежной системы.",
        "operationId": "GetBrand",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Частичный BIN карты",
              "pattern": " ^\\d{1,6}$",
              "type": "string"
            },
            "name": "partial_bin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Платежная система найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/bins/{bin_code}": {
      "get": {
        "tags": [
          "brands"
        ],
        "summary": "GetEmitterByBinCode",
        "description": "Получение информации о карте по BIN.",
        "operationId": "GetEmitterByBinCode",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "BIN карты",
              "pattern": " ^\\d{6}$",
              "type": "string"
            },
            "name": "bin_code",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Информация о карте найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BinInfo"
                }
              }
            }
          },
          "404": {
            "description": "Информация о карте не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/masterpass/sessions": {
      "post": {
        "tags": [
          "mp_session"
        ],
        "summary": "CreateMasterpassSession",
        "description": "Создание сессий в masterpass и вывод списка платежных карты по номеру клиента.",
        "operationId": "CreateMasterpassSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Сессия и список платежных карт",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/masterpass/sessions/{session_id}/cards": {
      "get": {
        "tags": [
          "mp_card"
        ],
        "summary": "GetMasterpassCards",
        "description": "Вывод массива платежных карт",
        "operationId": "GetMasterpassCards",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор сессии",
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Информация о платежной карте",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Список сохраненых карт",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionCard"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "mp_card"
        ],
        "summary": "CreateMasterpassCard",
        "description": "Добавление платежной карты",
        "operationId": "CreateMasterpassCard",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор сессии",
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterpassCardIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Информация о платежной карте",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Список сохраненых карт",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionCard"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/masterpass/sessions/{session_id}/cards/{token}": {
      "get": {
        "tags": [
          "mp_card"
        ],
        "summary": "GetMasterpassCard",
        "description": "Вывод информации о платежной карте по токену",
        "operationId": "GetMasterpassCard",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор сессии",
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "description": "Идентификатор платежной карты",
              "type": "string"
            },
            "name": "token",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Информация о платежной карте",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterpassCardOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "mp_card"
        ],
        "summary": "DeleteMasterpassCardByToken",
        "description": "Удаление платежной карты по токену",
        "operationId": "DeleteMasterpassCardByToken",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор сессии",
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "description": "Идентификатор платежной карты",
              "type": "string"
            },
            "name": "token",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Платежная карта удалена"
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/masterpass/sessions/{session_id}/cards/{token}/postback": {
      "post": {
        "tags": [
          "mp_card"
        ],
        "summary": "PostbackMasterpassCardByToken",
        "description": "Отправка postback после оплаты через платежную карты в masterpass",
        "operationId": "PostbackMasterpassCardByToken",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Идентификатор сессии",
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "description": "Идентификатор платежной карты",
              "type": "string"
            },
            "name": "token",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterpassPostbackIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Информация о операций postback",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Данные postback операции",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterpassPostbackOut"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/masterpass/phones": {
      "patch": {
        "tags": [
          "mp_data"
        ],
        "summary": "ChangeMasterpassPhone",
        "description": "Запрос изменения телефона пользователя",
        "operationId": "ChangeMasterpassPhone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePhoneIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Результат изменения",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePhoneOut"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка валидации данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Доступ запрещен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "HealthCheck",
        "description": "Проверка статуса API.",
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "API доступен",
            "content": {}
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/webhook-url": {
      "post": {
        "tags": [
          "webhook-handler"
        ],
        "summary": "SendWebhook",
        "description": "Уведомить о событии",
        "operationId": "SendWebhook",
        "parameters": [
          {
            "required": true,
            "schema": {
              "description": "Подпись уведомления",
              "type": "string"
            },
            "name": "x-signature",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Уведомление обработано",
            "content": {}
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "title": "Error",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "description": "[Код ошибки](#tag/errors)",
            "type": "string"
          },
          "message": {
            "description": "Описание ошибки",
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "description": "[Код ошибки](#tag/errors)",
            "type": "string"
          },
          "message": {
            "description": "Описание ошибки",
            "type": "string"
          }
        }
      },
      "CaptureMethod": {
        "title": "CaptureMethod",
        "enum": [
          "AUTO",
          "MANUAL"
        ],
        "type": "string",
        "description": "Способ списания оплаты"
      },
      "CardPayer": {
        "title": "CardPayer",
        "type": "object",
        "properties": {
          "pan": {
            "title": "pan",
            "pattern": "^\\d{12,19}$",
            "type": "string",
            "description": "PAN карты"
          },
          "exp": {
            "title": "exp",
            "pattern": "^\\d{2}/(\\d{2})$",
            "type": "string",
            "description": "Месяц и год истечения карты в формате MM/YY"
          },
          "cvc": {
            "title": "cvc",
            "pattern": "^\\d{3,4}$",
            "type": "string",
            "description": "Код верификации"
          },
          "holder": {
            "title": "holder",
            "type": "string",
            "description": "Имя держателя карты. Необязательный параметр",
            "default": "holder"
          },
          "save": {
            "title": "save",
            "type": "boolean",
            "description": "Сохранять ли карты после успешной оплаты? Необязательный параметр. Значение по умолчанию - false",
            "default": false
          },
          "email": {
            "title": "email",
            "type": "string",
            "description": "Email плательщика. Необязательный параметр",
            "format": "email"
          },
          "phone": {
            "title": "phone",
            "pattern": "^\\+\\d{4,15}$",
            "type": "string",
            "description": "Номер телефона плательщика. Необязательный параметр"
          },
          "card_id": {
            "title": "card_id",
            "type": "string",
            "description": "Идентификатор сохраненной карты. При отправке данного параметра, наличие остальных параметров необязательно. В зависимости от настроек платежного терминала, может потребоваться отправка параметра cvc"
          }
        }
      },
      "Contacts": {
        "title": "Contacts",
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string",
            "format": "email",
            "description": "Адрес электронной почты плательщика"
          },
          "phone": {
            "title": "Phone",
            "pattern": "^\\+\\d{4,15}$",
            "type": "string",
            "description": "Мобильный телефон плательщика"
          }
        },
        "description": "Контактные данные плательщика"
      },
      "CurrencyEnum": {
        "title": "CurrencyEnum",
        "enum": [
          "KZT"
        ],
        "type": "string",
        "description": "Доступные валюты для проведения платежа"
      },
      "WebhookEventNameEnum": {
        "title": "webhook-event",
        "enum": [
          "PAYMENT_APPROVED",
          "PAYMENT_CAPTURED",
          "PAYMENT_CANCELLED",
          "PAYMENT_DECLINED"
        ],
        "type": "string",
        "description": "Название события"
      },
      "EventNameEnum": {
        "title": "EventNameEnum",
        "enum": [
          "ORDER_CREATED",
          "ORDER_PAID",
          "ORDER_UNPAID",
          "PAYMENT_CREATED",
          "PAYMENT_PENDING",
          "PAYMENT_APPROVED",
          "PAYMENT_CAPTURED",
          "PAYMENT_CANCELLED",
          "PAYMENT_DECLINED",
          "REFUND_PENDING",
          "REFUND_APPROVED",
          "REFUND_DECLINED"
        ],
        "type": "string",
        "description": "Событие по заказу"
      },
      "OrderEventOut": {
        "title": "OrderEventOut",
        "required": [
          "id",
          "name",
          "created_at",
          "order_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор события",
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/EventNameEnum"
          },
          "created_at": {
            "description": "Время создания события",
            "type": "string"
          },
          "order_id": {
            "description": "Идентификатор заказа",
            "type": "string"
          },
          "payment_id": {
            "description": "Идентификатор платежа",
            "type": "string"
          },
          "refund_id": {
            "description": "Идентификатор возврата",
            "type": "string"
          },
          "md": {
            "description": "Параметр MD для 3DSecure авторизации",
            "type": "string"
          },
          "pa_req": {
            "description": "Параметр PaReq для 3DSecure авторизации",
            "type": "string"
          },
          "acs_url": {
            "description": "URL ACS сервера банка эмиттера",
            "type": "string"
          },
          "term_url": {
            "description": "URL терминала для отправки ответа 3DSecure",
            "type": "string"
          },
          "code": {
            "description": "[Код ошибки](#tag/errors)",
            "type": "string"
          },
          "message": {
            "description": "Описание ошибки",
            "type": "string"
          }
        }
      },
      "CustomerEventNameEnum": {
        "title": "CustomerEventNameEnum",
        "enum": [
          "CUSTOMER_CREATED",
          "CUSTOMER_READY",
          "CARD_CREATED",
          "CARD_ACTION_REQUIRED",
          "CARD_APPROVED",
          "CARD_DECLINED"
        ],
        "type": "string",
        "description": "Событие плательщика"
      },
      "CustomerEventOut": {
        "title": "CustomerEventOut",
        "required": [
          "id",
          "name",
          "created_at",
          "customer_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор события",
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/CustomerEventNameEnum"
          },
          "created_at": {
            "description": "Время создания события",
            "type": "string"
          },
          "customer_id": {
            "description": "Идентификатор плательщика",
            "type": "string"
          },
          "card_id": {
            "description": "Идентификатор сохраненной карты",
            "type": "string"
          },
          "md": {
            "description": "Параметр MD для 3DSecure авторизации",
            "type": "string"
          },
          "pa_req": {
            "description": "Параметр PaReq для 3DSecure авторизации",
            "type": "string"
          },
          "acs_url": {
            "description": "URL ACS сервера банка эмиттера",
            "type": "string"
          },
          "term_url": {
            "description": "URL терминала для отправки ответа 3DSecure",
            "type": "string"
          },
          "code": {
            "description": "[Код ошибки](#tag/errors)",
            "type": "string"
          },
          "message": {
            "description": "Описание ошибки",
            "type": "string"
          }
        }
      },
      "OrderIn": {
        "title": "OrderIn",
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Стоимость предлагаемых товаров или услуг в минорных денежных единицах. Например, для создания заказа на сумму 500 тенге, необходимо ввести 50000 (1 тенге = 100 тиын)",
            "minimum": 1.0,
            "type": "integer"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEnum"
          },
          "capture_method": {
            "$ref": "#/components/schemas/CaptureMethod"
          },
          "external_id": {
            "description": "Внешний идентификатор заказа",
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "description": "Описание заказа",
            "type": "string"
          },
          "extra_info": {
            "description": "Дополнительные данные, связанные с заказом",
            "type": "object"
          },
          "attempts": {
            "description": "Количество разрешенных попыток оплаты для заказа.",
            "default": 10,
            "minimum": 1,
            "maximum": 50,
            "type": "integer"
          },
          "due_date": {
            "description": "Срок действия заказа",
            "type": "string"
          },
          "customer_id": {
            "description": "Идентификатор плательщика. Для оплаты по сохраненной карте через форму оплаты с подтверждением CVC.",
            "minLength": 1,
            "type": "string"
          },
          "card_id": {
            "description": "Идентификатор сохраненной карты плательщика. Для оплаты по сохраненной карте через форму оплаты с подтверждением CVC.",
            "minLength": 1,
            "type": "string"
          },
          "back_url": {
            "description": "Ссылка, служащая для перенаправления клиента на сайт мерчанта после проведения оплаты",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "success_url": {
            "description": "Ссылка, служащая для перенаправления клиента на сайт мерчанта после успешного проведения оплаты",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "failure_url": {
            "description": "Ссылка, служащая для перенаправления клиента на сайт мерчанта после неуспешного проведения оплаты",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "template": {
            "description": "Шаблон формы оплаты",
            "type": "string"
          }
        }
      },
      "OrderOut": {
        "title": "OrderOut",
        "required": [
          "id",
          "status",
          "created_at",
          "amount",
          "currency",
          "capture_method",
          "checkout_url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор заказа",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "created_at": {
            "description": "Время создания заказа",
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "description": "Стоимость предлагаемых товаров или услуг в минорных денежных единицах. Например, для создания заказа на сумму 500 тенге, необходимо ввести 50000 (1 тенге = 100 тиын)"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEnum"
          },
          "capture_method": {
            "$ref": "#/components/schemas/CaptureMethod"
          },
          "external_id": {
            "description": "Внешний идентификатор заказа",
            "type": "string"
          },
          "description": {
            "description": "Описание заказа",
            "type": "string"
          },
          "extra_info": {
            "description": "Дополнительные данные, связанные с заказом",
            "type": "object"
          },
          "attempts": {
            "description": "Количество разрешенных попыток оплаты для заказа.",
            "minimum": 0,
            "maximum": 50,
            "type": "integer"
          },
          "due_date": {
            "description": "Срок действия заказа",
            "type": "string"
          },
          "customer_id": {
            "description": "Идентификатор плательщика. Для оплаты по сохраненной карте через форму оплаты с подтверждением CVC.",
            "minLength": 1,
            "type": "string"
          },
          "card_id": {
            "description": "Идентификатор сохраненной карты плательщика. Для оплаты по сохраненной карте через форму оплаты с подтверждением CVC.",
            "minLength": 1,
            "type": "string"
          },
          "back_url": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "description": "Ссылка, служащая для перенаправления клиента на сайт мерчанта после проведения оплаты"
          },
          "success_url": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "description": "Ссылка, служащая для перенаправления клиента на сайт мерчанта после успешного проведения оплаты"
          },
          "failure_url": {
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "description": "Ссылка, служащая для перенаправления клиента на сайт мерчанта после неуспешного проведения оплаты"
          },
          "template": {
            "description": "Шаблон формы оплаты",
            "type": "string"
          },
          "checkout_url": {
            "description": "Ссылка на форму оплаты",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "description": "Информация по созданному заказу"
      },
      "CustomerAndAccessToken": {
        "title": "CustomerAndAccessToken",
        "required": [
          "customer",
          "customer_access_token"
        ],
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/ExtendedCustomer"
          },
          "customer_access_token": {
            "description": "Токен доступа к плательщику",
            "type": "string"
          }
        }
      },
      "OrderAndAccessToken": {
        "title": "OrderAndAccessToken",
        "required": [
          "order",
          "order_access_token"
        ],
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/OrderOut"
          },
          "order_access_token": {
            "description": "Токен доступа к заказу",
            "type": "string"
          }
        }
      },
      "OrderStatus": {
        "title": "OrderStatus",
        "enum": [
          "UNPAID",
          "ON_HOLD",
          "PAID"
        ],
        "type": "string",
        "description": "Статус заказа"
      },
      "CustomerStatus": {
        "title": "CustomerStatus",
        "enum": [
          "PENDING",
          "READY"
        ],
        "type": "string",
        "description": "Статус плательщика"
      },
      "PaginatedOrderOut": {
        "title": "PaginatedOrderOut",
        "required": [
          "count",
          "data"
        ],
        "type": "object",
        "properties": {
          "count": {
            "title": "сount",
            "minimum": 0,
            "type": "integer",
            "description": "Количество заказов"
          },
          "data": {
            "title": "OrderOut",
            "type": "array",
            "description": "Информация по созданным заказам",
            "items": {
              "$ref": "#/components/schemas/OrderOut"
            }
          }
        }
      },
      "PaginatedPaymentOut": {
        "title": "PaginatedPaymentOut",
        "required": [
          "count",
          "data"
        ],
        "type": "object",
        "properties": {
          "count": {
            "title": "сount",
            "minimum": 0,
            "type": "integer",
            "description": "Количество платежей"
          },
          "data": {
            "title": "PaymentOut",
            "type": "array",
            "description": "Информация по платежам",
            "items": {
              "$ref": "#/components/schemas/PaymentOut"
            }
          }
        }
      },
      "PaginatedRefundOut": {
        "title": "PaginatedRefundOut",
        "required": [
          "count",
          "data"
        ],
        "type": "object",
        "properties": {
          "count": {
            "title": "сount",
            "minimum": 0,
            "type": "integer",
            "description": "Количество возвратов"
          },
          "data": {
            "title": "PaymentOut",
            "type": "array",
            "description": "Информация по возвратам",
            "items": {
              "$ref": "#/components/schemas/RefundOut"
            }
          }
        }
      },
      "PayerOut": {
        "title": "payer",
        "required": [
          "pan_masked",
          "expiry_date"
        ],
        "type": "object",
        "properties": {
          "pan_masked": {
            "description": "Маскированный PAN карты",
            "pattern": "^\\d{0,6}\\*+\\d{0,4}$",
            "type": "string"
          },
          "expiry_date": {
            "description": "Месяц и год истечения срока действия карты",
            "pattern": "^\\d{2}/(\\d{2})$",
            "type": "string"
          },
          "holder": {
            "description": "Имя держателя карты",
            "type": "string"
          },
          "payment_system": {
            "description": "Платежная система карты (VISA, MASTERCARD, и тд.)",
            "type": "string"
          },
          "emitter": {
            "description": "Код банка, выпустившего карту плательщика",
            "type": "string"
          },
          "email": {
            "description": "Адрес электронной почты плательщика",
            "type": "string",
            "format": "email"
          },
          "phone": {
            "description": "Номер мобильного телефона плательщика",
            "pattern": "^\\+\\d{4,15}$",
            "type": "string"
          },
          "customer_id": {
            "description": "Идентификатор плательщика",
            "minLength": 1,
            "type": "string"
          },
          "card_id": {
            "description": "Идентификатор сохраненной карты плательщика",
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "Платежные данные (включают информацию по сохраненной карте или по плательщику)"
      },
      "PayerType": {
        "title": "PayerType",
        "enum": [
          "PAYMENT_TOKEN",
          "BINDING"
        ],
        "type": "string",
        "description": "Способ проведения оплаты"
      },
      "PaymentCancel": {
        "title": "PaymentCancel",
        "type": "object",
        "properties": {
          "reason": {
            "description": "Причина совершения операции",
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "PaymentCapture": {
        "title": "PaymentCapture",
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Сумма списания в минорных денежных единицах. Например, для списания 500 тенге, необходимо ввести 50000 (1 тенге = 100 тиын)",
            "minimum": 100,
            "type": "integer"
          },
          "reason": {
            "description": "Причина совершения операции",
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "PaymentError": {
        "title": "error",
        "description": "Детальное описание ошибки платежа. Присутствует если status = DECLINED",
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "description": "[Код ошибки](#tag/errors)",
            "type": "string"
          },
          "message": {
            "description": "Описание ошибки",
            "type": "string"
          }
        }
      },
      "PaymentIn": {
        "title": "PaymentIn",
        "type": "object",
        "properties": {
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "customer_card": {
            "$ref": "#/components/schemas/CustomerCard"
          },
          "card": {
            "description": "Публикуемые карточные данные. Обязателен при оплате новой картой",
            "$ref": "#/components/schemas/Card"
          },
          "contacts": {
            "Публикуемые карточные данные": "Контакты плательщика",
            "$ref": "#/components/schemas/Contacts"
          }
        }
      },
      "PaymentMethod": {
        "title": "PaymentMethod",
        "description": "Платежный метод (используется при оплате новой картой)",
        "required": [
          "token",
          "session"
        ],
        "type": "object",
        "properties": {
          "token": {
            "description": "Токен платежного средства, предоставленного плательщиком",
            "minLength": 1,
            "type": "string"
          },
          "save_card": {
            "description": "Условие сохранения карты плательщика",
            "type": "boolean",
            "default": false
          }
        }
      },
      "Card": {
        "title": "Card",
        "required": [
          "pan_masked",
          "expiry_date"
        ],
        "type": "object",
        "properties": {
          "pan_masked": {
            "description": "Маскированный PAN карты",
            "type": "string"
          },
          "expiry_date": {
            "description": "Месяц и год истечения срока действия карты",
            "type": "string"
          },
          "holder": {
            "description": "Имя держателя карты",
            "type": "string"
          },
          "payment_system": {
            "description": "Платежная система карты (VISA, MASTERCARD, и тд.)",
            "type": "string"
          },
          "emitter": {
            "description": "Код банка, выпустившего карту",
            "type": "string"
          }
        },
        "description": "Публикуемые карточные данные"
      },
      "Client": {
        "title": "Client",
        "type": "object",
        "properties": {
          "ip": {
            "description": "IP-адрес устройства клиента",
            "type": "string"
          },
          "fingerprint": {
            "description": "`fingerprint` устройства клиента",
            "type": "string"
          }
        },
        "description": "Клиентское устройство плательщика"
      },
      "ApplePayIn": {
        "title": "ApplePayIn",
        "required": [
          "url",
          "platform",
          "domain_name"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL который вернул верификатор Apple Wallet"
          },
          "platform": {
            "type": "string",
            "description": "Тип платформы с которой был запрошен запрос на оплату, возвращает верификатор Apple Wallet.",
            "default": "web"
          },
          "domain_name": {
            "type": "string",
            "description": "Домен с которого был отправлен запрос на оплату, в формате `domain.com` без указания схемы."
          }
        }
      },
      "ApplePayOut": {
        "title": "ApplePayOut",
        "description": "Возвращает данные для создания токена в сервисе Apple Wallet",
        "type": "object",
        "properties": {
          "epochTimestamp": {
            "type": "integer",
            "description": "Время создания запроса на верификацию."
          },
          "expiresAt": {
            "type": "integer",
            "description": "Время до которого запрос действителен."
          },
          "merchantSessionIdentifier": {
            "type": "string",
            "description": "Специальный идентификатор сессии мерчанта."
          },
          "nonce": {
            "type": "string",
            "description": "Номер одноразовой сессии."
          },
          "merchantIdentifier": {
            "type": "string",
            "description": "Специальный идентификатор мерчанта."
          },
          "domainName": {
            "type": "string",
            "description": "Домен с которого был создан запрос на открытие сессии."
          },
          "displayName": {
            "type": "string",
            "description": "Имя провайдера для отображения в ApplePay."
          },
          "signature": {
            "type": "string",
            "description": "Подпись сессии."
          },
          "operationalAnalyticsIdentifier": {
            "type": "string",
            "description": "Идентификатор операции для аналитики в Apple Wallet."
          },
          "retries": {
            "type": "integer",
            "description": "Номер попытки открытия сессии в Apple Wallet."
          }
        }
      },
      "PaymentMethodIn": {
        "title": "PaymentMethodIn",
        "required": [
          "payment_tool",
          "client"
        ],
        "type": "object",
        "properties": {
          "payment_tool": {
            "$ref": "#/components/schemas/PaymentTool"
          },
          "client": {
            "$ref": "#/components/schemas/Client"
          }
        }
      },
      "PaymentMethodOut": {
        "title": "PaymentMethodOut",
        "required": [
          "session",
          "card",
          "token",
          "expires_at"
        ],
        "type": "object",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/Card"
          },
          "session": {
            "description": "Платежная сессия",
            "type": "string"
          },
          "token": {
            "description": "Платежный токен",
            "type": "string"
          },
          "expires_at": {
            "description": "Время истечения действия платежного токена",
            "type": "string"
          }
        }
      },
      "PaymentTool": {
        "title": "PaymentTool",
        "required": [
          "type",
          "pan",
          "expiry_date",
          "apple_pay",
          "google_pay"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PaymentToolType"
          },
          "pan": {
            "description": "PAN карты",
            "type": "string"
          },
          "expiry_date": {
            "description": "Месяц и год истечения срока действия карты",
            "pattern": " ^\\d{2}/(\\d{2})$",
            "type": "string"
          },
          "cvc": {
            "description": "CVC/CVV код карты",
            "pattern": " ^\\d{3,4}$",
            "type": "string"
          },
          "holder": {
            "description": "Имя держателя карты",
            "type": "string"
          },
          "apple_pay": {
            "$ref": "#/components/schemas/ApplePayData"
          },
          "google_pay": {
            "$ref": "#/components/schemas/GooglePayData"
          }
        },
        "description": "Платежное средство.\n 1.При выборе типа `CARD` поля `pan` и `expiry_date` обязательны.\n 2.При выборе типа `APPLE_PAY` поле `apple_pay` обязателен.\n 3.При выборе типа `GOOGLE_PAY` поле `google_pay` обязателен."
      },
      "ApplePayData": {
        "title": "ApplePayData",
        "description": "Данные для оплаты через ApplePay.\n Поля внутри стандартно выдаются сервисом Apple Wallet при запросе на оплату.",
        "required": [
          "token",
          "card_network",
          "card_type"
        ],
        "type": "object",
        "properties": {
          "token": {
            "description": "Подтвержденный токен от Apple Wallet",
            "type": "string"
          },
          "card_network": {
            "description": "Сеть выпустившая карту которая привязана в сервисе Apple Wallet карты",
            "type": "string"
          },
          "card_type": {
            "description": "Тип привязанной в сервисе Apple Wallet карты"
          }
        }
      },
      "GooglePayData": {
        "title": "GooglePayData",
        "type": "object",
        "required": [
          "token",
          "card_network",
          "card_details"
        ],
        "description": "Данные для оплаты через GooglePay.\n Поля внутри стандартно выдаются сервисами Google при запроса на оплату.",
        "properties": {
          "token": {
            "description": "Подтвержденный токен от GooglePay",
            "type": "string"
          },
          "card_network": {
            "description": "Сеть выпустившая карту которая привязана в сервисе GooglePay",
            "type": "string"
          },
          "card_details": {
            "description": "Последние 4 цифры карты сохраненной в сервисе GooglePay",
            "type": "string"
          }
        }
      },
      "PaymentToolType": {
        "title": "PaymentToolType",
        "enum": [
          "CARD",
          "APPLE_PAY",
          "GOOGLE_PAY"
        ],
        "type": "string",
        "description": "Доступны несколько видов платежных инструментов: \n`CARD`: Когда для операции будут использоваться карточные данные;\n`APPLE_PAY`: Когда для операции будет использоваться подтвержденный токен от ApplePay;\n`GOOGLE_PAY`: Когда для операции будет использоваться токен от GooglePay"
      },
      "CustomerCard": {
        "title": "CustomerCard",
        "required": [
          "customer_id",
          "card_id"
        ],
        "description": "Сохраненная карта плательщика (используется при оплате по сохраненной карте)",
        "type": "object",
        "properties": {
          "card_id": {
            "description": "Идентификатор сохраненной карты плательщика",
            "minLength": 1,
            "type": "string"
          },
          "cvc": {
            "description": "CVC/CVV код карты (при оплате с предзаполненными pan и expiry_date)",
            "pattern": " ^\\d{3,4}$",
            "type": "string"
          }
        }
      },
      "PaymentOut": {
        "title": "PaymentOut",
        "required": [
          "id",
          "status",
          "created_at",
          "approved_amount",
          "captured_amount",
          "refunded_amount",
          "processing_fee",
          "payer"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор платежа",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "created_at": {
            "description": "Время создания платежа",
            "type": "string"
          },
          "approved_amount": {
            "description": "Авторизованная сумма",
            "type": "integer"
          },
          "captured_amount": {
            "description": "Сумма списания",
            "type": "integer"
          },
          "refunded_amount": {
            "description": "Сумма возврата",
            "type": "integer"
          },
          "processing_fee": {
            "description": "Комиссия процессинга",
            "type": "number"
          },
          "payer": {
            "$ref": "#/components/schemas/PayerOut"
          },
          "error": {
            "$ref": "#/components/schemas/PaymentError"
          }
        }
      },
      "PaymentStatus": {
        "title": "PaymentStatus",
        "enum": [
          "PENDING",
          "APPROVED",
          "CAPTURED",
          "CANCELLED",
          "DECLINED"
        ],
        "type": "string",
        "description": "Статус платежа"
      },
      "RefundIn": {
        "title": "RefundIn",
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Сумма возврата в минорных денежных единицах. Например, для создания возврата на сумму 500 тенге, необходимо ввести 50000 (1 тенге = 100 тиын)",
            "minimum": 100,
            "type": "integer"
          },
          "reason": {
            "description": "Причина совершения операции",
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "RefundOut": {
        "title": "RefundOut",
        "required": [
          "id",
          "status",
          "created_at",
          "amount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор возврата",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "created_at": {
            "description": "Время создания возврата",
            "type": "string"
          },
          "amount": {
            "description": "Сумма возврата",
            "type": "integer"
          },
          "reason": {
            "description": "Причина возврата",
            "type": "string"
          }
        }
      },
      "RefundStatus": {
        "title": "RefundStatus",
        "enum": [
          "PENDING",
          "APPROVED",
          "DECLINED"
        ],
        "type": "string",
        "description": "Статус возврата"
      },
      "ScheduleOut": {
        "title": "ScheduleOut",
        "required": [
          "status",
          "next_pay"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ScheduleStatusEnum"
          },
          "next_pay": {
            "description": "Время и дата следующего списания",
            "type": "string"
          },
          "step": {
            "description": "Шаг периодичности списания",
            "minimum": 1,
            "type": "integer",
            "default": 1
          },
          "unit": {
            "$ref": "#/components/schemas/ScheduleUnitEnum"
          }
        },
        "description": "Данные по дате и периодичности подписки"
      },
      "ExtendedCard": {
        "title": "ExtendedCard",
        "required": [
          "id",
          "customer_id",
          "status",
          "created_at",
          "pan_masked",
          "expiry_date",
          "cvc_required"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор сохраненной карты",
            "type": "string"
          },
          "customer_id": {
            "description": "Идентификатор плательщика",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CardStatus"
          },
          "created_at": {
            "description": "Время создания сохраненной карты",
            "type": "string"
          },
          "pan_masked": {
            "description": "Маскированный PAN карты",
            "type": "string"
          },
          "expiry_date": {
            "description": "Месяц и год истечения срока действия карты",
            "type": "string"
          },
          "holder": {
            "description": "Имя держателя карты",
            "type": "string"
          },
          "payment_system": {
            "description": "Платежная система карты (VISA, MASTERCARD, и тд.)",
            "type": "string"
          },
          "emitter": {
            "description": "Код банка, выпустившего карту",
            "type": "string"
          },
          "cvc_required": {
            "description": "Необходимость ввода cvc при оплате",
            "type": "boolean"
          },
          "error": {
            "$ref": "#/components/schemas/PaymentError"
          },
          "action": {
            "$ref": "#/components/schemas/TDSAction"
          }
        }
      },
      "ExtendedCustomer": {
        "title": "ExtendedCustomer",
        "required": [
          "id",
          "status",
          "created_at",
          "access_token",
          "checkout_url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор плательщика",
            "type": "string"
          },
          "created_at": {
            "description": "Время создания плательщика",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CustomerStatus"
          },
          "external_id": {
            "description": "Внешний идентификатор плательщика",
            "type": "string"
          },
          "email": {
            "description": "Адрес электронной почты плательщика",
            "type": "string",
            "format": "email"
          },
          "phone": {
            "description": "Номер мобильного телефона плательщика",
            "type": "string"
          },
          "checkout_url": {
            "description": "Ссылка на форму сохранения карты",
            "type": "string",
            "format": "uri"
          },
          "access_token": {
            "description": "Токен доступа к плательщику",
            "type": "string"
          }
        }
      },
      "BindingCard": {
        "title": "BindingCard",
        "required": [
          "pan",
          "exp",
          "cvc"
        ],
        "type": "object",
        "properties": {
          "pan": {
            "title": "pan",
            "pattern": "^\\d{12,19}$",
            "type": "string",
            "description": "PAN карты"
          },
          "exp": {
            "title": "exp",
            "pattern": "^\\d{2}/(\\d{2})$",
            "type": "string",
            "description": "Месяц и год истечения карты в формате MM/YY"
          },
          "cvc": {
            "title": "cvc",
            "pattern": "^\\d{3,4}$",
            "type": "string",
            "description": "Код верификации"
          },
          "holder": {
            "title": "holder",
            "type": "string",
            "description": "Имя держателя карты. Необязательный параметр."
          }
        }
      },
      "ScheduleStatusEnum": {
        "title": "ScheduleStatusEnum",
        "enum": [
          "ACTIVE",
          "PAUSED",
          "CANCELLED"
        ],
        "type": "string",
        "description": "Статус подписки"
      },
      "ScheduleUnitEnum": {
        "title": "ScheduleUnitEnum",
        "enum": [
          "DAY",
          "WEEK",
          "MONTH"
        ],
        "type": "string",
        "description": "Периодичность подписки"
      },
      "SubscriptionIn": {
        "title": "SubscriptionIn",
        "required": [
          "customer_id",
          "card_id",
          "amount",
          "next_pay"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "description": "Идентификатор плательщика",
            "minLength": 1,
            "type": "string"
          },
          "card_id": {
            "description": "Идентификатор сохраненной карты плательщика",
            "minLength": 1,
            "type": "string"
          },
          "amount": {
            "description": "Сумма списания в минорных денежных единицах. Например, для создания подписки на сумму 500 тенге, необходимо ввести 50000 (1 тенге = 100 тиын)",
            "minimum": 0,
            "type": "integer"
          },
          "currency": {
            "description": "Символьный код валюты согласно ISO 4217",
            "type": "string",
            "default": "KZT"
          },
          "description": {
            "description": "Описание подписки",
            "type": "string"
          },
          "extra_info": {
            "description": "Дополнительные данные, связанные с подпиской",
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ]
          },
          "next_pay": {
            "description": "Время и дата следующего списания",
            "type": "string"
          },
          "step": {
            "description": "Шаг периодичности списания",
            "minimum": 1,
            "type": "integer",
            "default": 1
          },
          "unit": {
            "$ref": "#/components/schemas/ScheduleUnitEnum"
          }
        }
      },
      "SubscriptionOut": {
        "title": "SubscriptionOut",
        "required": [
          "id",
          "created_at",
          "amount",
          "currency",
          "payer",
          "schedule"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор подписки",
            "type": "string"
          },
          "created_at": {
            "description": "Время создания подписки",
            "type": "string"
          },
          "amount": {
            "description": "Сумма списания в минорных денежных единицах. Например, для создания подписки на сумму 500 тенге, необходимо ввести 50000 (1 тенге = 100 тиын)",
            "minimum": 0,
            "type": "integer"
          },
          "currency": {
            "description": "Символьный код валюты согласно ISO 4217",
            "type": "string",
            "default": "KZT"
          },
          "description": {
            "description": "Описание подписки",
            "type": "string"
          },
          "extra_info": {
            "description": "Дополнительные данные, связанные с подпиской",
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ]
          },
          "payer": {
            "$ref": "#/components/schemas/PayerOut"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleOut"
          }
        }
      },
      "SubscriptionStatusIn": {
        "title": "SubscriptionStatusIn",
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ScheduleStatusEnum"
          }
        }
      },
      "SubscriptionUpdate": {
        "title": "SubscriptionUpdate",
        "type": "object",
        "properties": {
          "customer_id": {
            "description": "Идентификатор плательщика",
            "minLength": 1,
            "type": "string"
          },
          "card_id": {
            "description": "Идентификатор сохраненной карты плательщика",
            "minLength": 1,
            "type": "string"
          },
          "amount": {
            "description": "Сумма списания, в минорных денежных единицах",
            "minimum": 0,
            "type": "integer"
          },
          "currency": {
            "description": "Символьный код валюты согласно ISO 4217",
            "type": "string",
            "default": "KZT"
          },
          "description": {
            "description": "Описание подписки",
            "type": "string"
          },
          "extra_info": {
            "description": "Дополнительные данные, связанные с подпиской",
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ]
          },
          "next_pay": {
            "description": "Время и дата следующего списания",
            "type": "string"
          },
          "step": {
            "description": "Шаг периодичности списания",
            "minimum": 1,
            "type": "integer",
            "default": 1
          },
          "unit": {
            "$ref": "#/components/schemas/ScheduleUnitEnum"
          }
        }
      },
      "WebhookIn": {
        "title": "WebhookIn",
        "required": [
          "url",
          "events"
        ],
        "type": "object",
        "properties": {
          "url": {
            "description": "URL, на который будут поступать webhook-и",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "events": {
            "description": "События, о которых будут поступать webhook-и",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEventNameEnum"
            }
          }
        }
      },
      "WebhookOut": {
        "title": "WebhookOut",
        "required": [
          "url",
          "events",
          "id",
          "created_at",
          "active",
          "key"
        ],
        "type": "object",
        "properties": {
          "url": {
            "description": "URL, на который будут поступать webhook-и",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "events": {
            "description": "События, о которых будут поступать webhook-и",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEventNameEnum"
            }
          },
          "id": {
            "description": "Идентификатор webhook-а",
            "type": "string"
          },
          "created_at": {
            "description": "Время создания webhook-а",
            "type": "string"
          },
          "active": {
            "description": "Наличие доставки webhook-ов",
            "type": "boolean"
          },
          "key": {
            "description": "Ключ для проверки подлинности webhook-ов, приходящих на url",
            "type": "string"
          }
        }
      },
      "WebhookPatch": {
        "title": "WebhookPatch",
        "type": "object",
        "properties": {
          "url": {
            "description": "URL, на который будут поступать webhook-и",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "events": {
            "description": "События, о которых будут поступать webhook-и",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEventNameEnum"
            }
          }
        }
      },
      "CardIn": {
        "title": "CardIn",
        "type": "object",
        "properties": {
          "token": {
            "description": "Токен платежного средства, предоставленного плательщиком",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "CardStatus": {
        "title": "CardStatus",
        "enum": [
          "PENDING",
          "APPROVED",
          "DECLINED"
        ],
        "type": "string",
        "description": "Статус сохраненной карты"
      },
      "MasterpassCardStatus": {
        "title": "MasterpassCardStatus",
        "enum": [
          "INACTIVE",
          "ACTIVE",
          "CVC2_ALWAYS",
          "CVC2_SUSPENDED",
          "ACTIVE_SUSPENDED",
          "EXPIRED"
        ],
        "type": "string",
        "description": "Статус сохраненной карты"
      },
      "MasterpassChannelType": {
        "title": "MasterpassChannelType",
        "enum": [
          "RECURRING",
          "WEB",
          "APP_IOS",
          "APP_ANDROID",
          "TVE",
          "SMART_TV",
          "SMART_DEVICE",
          "USSD",
          "IVR",
          "OFFLINE",
          "OTHER"
        ],
        "type": "string",
        "description": "Список каналов"
      },
      "MasterpassCardRequired": {
        "title": "MasterpassCardRequired",
        "enum": [
          "NONE",
          "CVC2",
          "THREE_DS",
          "THREE_DS_AND_CVC2_OR_CVC2",
          "THREE_DS_AND_CVC2"
        ],
        "type": "string",
        "description": "Статус проверки карты (recommendation/required)"
      },
      "MasterpassUserStatus": {
        "title": "MasterpassUserStatus",
        "enum": [
          "INACTIVE",
          "ACTIVE",
          "SUSPENDED"
        ],
        "type": "string",
        "description": "Статус пользователя"
      },
      "MasterpassFingerprintStatus": {
        "title": "MasterpassFingerprintStatus",
        "enum": [
          "NON_VALID",
          "VALID",
          "TXN_VERIFIED"
        ],
        "type": "string",
        "description": "Статус отпечатка устройства"
      },
      "CustomerIn": {
        "title": "CustomerIn",
        "type": "object",
        "properties": {
          "external_id": {
            "description": "Внешний идентификатор плательщика",
            "type": "string"
          },
          "email": {
            "description": "Адрес электронной почты плательщика",
            "type": "string",
            "format": "email"
          },
          "phone": {
            "description": "Номер мобильного телефона плательщика",
            "type": "string"
          }
        }
      },
      "WebhookEvent": {
        "title": "WebhookEvent",
        "required": [
          "event",
          "order",
          "payment"
        ],
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/WebhookEventNameEnum"
          },
          "order": {
            "$ref": "#/components/schemas/WebhookOrder"
          },
          "payment": {
            "$ref": "#/components/schemas/ExtendedPayment"
          }
        }
      },
      "WebhookOrder": {
        "title": "order",
        "description": "Детали родительского заказа",
        "required": [
          "id",
          "shop_id",
          "status",
          "created_at",
          "amount",
          "currency",
          "capture_method"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор заказа",
            "type": "string"
          },
          "shop_id": {
            "description": "Идентификатор магазина",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "created_at": {
            "description": "Время создания заказа",
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "description": "Стоимость предлагаемых товаров или услуг в минорных денежных единицах. Например, для создания заказа на сумму 500 тенге, необходимо ввести 50000 (1 тенге = 100 тиын)"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyEnum"
          },
          "capture_method": {
            "$ref": "#/components/schemas/CaptureMethod"
          },
          "external_id": {
            "description": "Внешний идентификатор заказа",
            "type": "string"
          },
          "description": {
            "description": "Описание заказа",
            "type": "string"
          },
          "extra_info": {
            "description": "Дополнительные данные, связанные с заказом",
            "type": "object"
          },
          "due_date": {
            "description": "Срок действия заказа",
            "type": "string"
          }
        }
      },
      "ExtendedPayment": {
        "title": "payment",
        "description": "Детали платежа",
        "required": [
          "id",
          "order_id",
          "status",
          "created_at",
          "approved_amount",
          "captured_amount",
          "refunded_amount",
          "processing_fee"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор платежа",
            "type": "string"
          },
          "order_id": {
            "description": "Идентификатор родительского заказа",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "created_at": {
            "description": "Время создания платежа",
            "type": "string",
            "format": "date-time"
          },
          "approved_amount": {
            "description": "Авторизованная сумма",
            "type": "integer"
          },
          "captured_amount": {
            "description": "Сумма списания",
            "type": "integer"
          },
          "refunded_amount": {
            "description": "Сумма возврата",
            "type": "integer"
          },
          "processing_fee": {
            "description": "Комиссия процессинга",
            "type": "number"
          },
          "payer": {
            "$ref": "#/components/schemas/PayerOut"
          },
          "error": {
            "$ref": "#/components/schemas/PaymentError"
          },
          "acquirer": {
            "$ref": "#/components/schemas/Acquirer"
          },
          "action": {
            "$ref": "#/components/schemas/TDSAction"
          }
        }
      },
      "ExtendedRefund": {
        "title": "refund",
        "description": "Детали возврата",
        "required": [
          "id",
          "payment_id",
          "order_id",
          "status",
          "amount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Идентификатор возврата",
            "type": "string"
          },
          "payment_id": {
            "description": "Идентификатор родительского платежа",
            "type": "string"
          },
          "order_id": {
            "description": "Идентификатор родительского заказа",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "created_at": {
            "description": "Время создания возврата",
            "type": "string",
            "format": "date-time"
          },
          "error": {
            "$ref": "#/components/schemas/PaymentError"
          },
          "acquirer": {
            "$ref": "#/components/schemas/Acquirer"
          }
        }
      },
      "Acquirer": {
        "title": "acquirer",
        "description": "Данные банка эквайера",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "name",
            "type": "string",
            "description": "Название банка-эквайера, где платеж был обработан."
          },
          "reference": {
            "title": "reference",
            "type": "string",
            "description": "Уникальный идентификатор платежа на стороне банка-эквайера. Присутствует при успешной авторизации."
          }
        }
      },
      "TDSAction": {
        "title": "action",
        "description": "Данные для прохождения 3DSecure на стороне Банка",
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "description": "Ссылка для открытия формы верификации 3DSecure от Банка",
            "type": "string",
            "format": "url"
          }
        }
      },
      "AmountCategory": {
        "title": "AmountCategory",
        "enum": [
          "FIXED",
          "RANGE"
        ],
        "type": "string",
        "description": "Виды фильтров по сумме"
      },
      "DateCategory": {
        "title": "DateCategory",
        "enum": [
          "DAILY",
          "MONTHLY",
          "QUARTERLY",
          "YEARLY",
          "MANUAL"
        ],
        "type": "string",
        "description": "Виды фильтров по дате"
      },
      "BrandOut": {
        "title": "BrandOut",
        "required": [
          "brand"
        ],
        "type": "object",
        "properties": {
          "brand": {
            "$ref": "#/components/schemas/MyPaymentCardBrand"
          }
        }
      },
      "MyPaymentCardBrand": {
        "title": "MyPaymentCardBrand",
        "enum": [
          "AMERICAN_EXPRESS",
          "MASTERCARD",
          "VISA",
          "MAESTRO",
          "MIR",
          "JCB",
          "DINER_CLUB",
          "DISCOVERY",
          "UNION_PAY",
          "HIPER",
          "HIPERCARD",
          "ELO",
          "UNKNOWN"
        ],
        "type": "string",
        "description": "Платежная система"
      },
      "BinInfo": {
        "title": "Информация по карте",
        "required": [
          "code",
          "brand",
          "emitter_code",
          "emitter_name"
        ],
        "type": "object",
        "properties": {
          "code": {
            "description": "BIN карты",
            "type": "string"
          },
          "brand": {
            "description": "Платежная система",
            "type": "string"
          },
          "type": {
            "description": "Тип карты (`DEBIT`, `CREDIT`)",
            "type": "string"
          },
          "emitter_code": {
            "description": "Код банка-эмиттера",
            "type": "string"
          },
          "emitter_name": {
            "description": "Название банка-эмиттера",
            "type": "string"
          }
        },
        "description": "Возвращает информацию о карте по BIN"
      },
      "SessionCard": {
        "title": "SessionCard",
        "required": [
          "token",
          "status",
          "cards"
        ],
        "type": "object",
        "properties": {
          "token": {
            "description": "Идентификатор сохраненной карты в masterpass",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/MasterpassCardStatus"
          },
          "card": {
            "description": "Публикуемые карточные данные.",
            "$ref": "#/components/schemas/Card"
          }
        }
      },
      "SessionIn": {
        "title": "SessionIn",
        "required": [
          "phone",
          "fingerprint",
          "phone_check_date",
          "channel"
        ],
        "type": "object",
        "properties": {
          "phone": {
            "description": "Телефонный номер клиента из masterpass",
            "type": "string"
          },
          "fingerprint": {
            "description": "Отпечаток устройства",
            "type": "string"
          },
          "phone_check_date": {
            "description": "Последняя дата OTP проверки номера телефона клиента",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/MasterpassChannelType"
          }
        }
      },
      "SessionOut": {
        "title": "Информация о сесиий и списке карт",
        "required": [
          "session",
          "is_otp_required"
        ],
        "type": "object",
        "properties": {
          "session": {
            "description": "Идентификатор сессий",
            "type": "string"
          },
          "is_otp_required": {
            "description": "Потробность OTP проверки",
            "type": "boolean"
          },
          "is_otp_required_date": {
            "description": "Дата проверки OTP",
            "type": "datetime"
          },
          "cards": {
            "title": "Список сохраненых карт",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionCard"
            }
          }
        },
        "description": "Возвращает информацию о карте по BIN"
      },
      "MasterpassCardIn": {
        "title": "MasterpassCardIn",
        "required": [
          "customer_id",
          "card_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "description": "Идентификатор плательщика",
            "type": "string"
          },
          "card_id": {
            "description": "Идентификатор сохраненной карты плательщика",
            "type": "string"
          }
        }
      },
      "MasterpassCardOut": {
        "title": "SessionCard",
        "required": [
          "token",
          "status",
          "cards"
        ],
        "type": "object",
        "properties": {
          "token": {
            "description": "Идентификатор сохраненной карты",
            "type": "string"
          },
          "recommendation": {
            "$ref": "#/components/schemas/MasterpassCardRequired"
          },
          "required": {
            "$ref": "#/components/schemas/MasterpassCardRequired"
          },
          "card": {
            "description": "Публикуемые карточные данные.",
            "$ref": "#/components/schemas/Card"
          }
        }
      },
      "ChangePhoneIn": {
        "title": "ChangePhoneIn",
        "required": [
          "old_phone",
          "new_phone"
        ],
        "type": "object",
        "properties": {
          "old_phone": {
            "description": "Старый номер",
            "type": "string"
          },
          "new_phone": {
            "description": "Новый номер",
            "type": "string"
          }
        }
      },
      "ChangePhoneOut": {
        "title": "ChangePhoneOut",
        "required": [
          "phone"
        ],
        "type": "object",
        "properties": {
          "phone": {
            "description": "Обновленный номер",
            "type": "string"
          }
        }
      },
      "MasterpassPostbackIn": {
        "title": "MasterpassPostbackIn",
        "required": [
          "phone"
        ],
        "type": "object",
        "properties": {
          "order_id": {
            "description": "Идентификатор заказа",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/MasterpassChannelType"
          }
        }
      },
      "MasterpassPostbackOut": {
        "title": "MasterpassPostbackOut",
        "required": [
          "phone"
        ],
        "type": "object",
        "properties": {
          "order_id": {
            "description": "Идентификатор заказа",
            "type": "string"
          },
          "external_id": {
            "description": "Внешний идентификатор заказа",
            "type": "string"
          },
          "amount": {
            "description": "Сумма платежа",
            "type": "int"
          },
          "currency": {
            "type": "string",
            "description": "Валюта, символьный код согласно [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)."
          }
        }
      }
    },
    "responses": {},
    "parameters": {},
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "securitySchemes": {
      "API Key": {
        "type": "apiKey",
        "name": "API-KEY",
        "description": "Для аутентификации и авторизации вызовов используется API ключ. Данный ключ должен передаваться в заголовке `API-KEY` как указано в примере ниже:\n```\nPOST /v2/orders HTTP/1.1\nHost: api.ioka.kz\nAPI-KEY: eyJ0eXAi...\nContent-Type: application/json\n\n{\n\t\"amount\": 5000,\n\t\"currency\": \"KZT\",\n\t\"capture_method\": \"AUTO\",\n\t\"due_date\": \"2019-08-24T14:15:22\",\n\t\"description\": \"book #23\",\n\t\"back_url\": \"https://myshop.kz/back\"\n}\n```\n\n API ключ позволяет совершать в ioka API любые операции от Вашего имени. При потере ключа его необходимо перевыпустить.",
        "in": "header"
      },
      "Customer Access Token": {
        "type": "apiKey",
        "name": "X-Customer-Access-Token",
        "description": "Для аутентификации и авторизации вызовов методов для выдачи данных [плательщика](#operation/GetCustomerByID) или [сохраненных карт](#operation/GetCardByID) используется ключ доступа к плательщику. Данный ключ должен передаваться в заголовке `X-Customer-Access-Token` как указано в примере ниже:\n```\nGET /v2/customers/:customer_id/cards HTTP/1.1\nHost: api.ioka.kz\nX-Customer-Access-Token: ZDFFxcdf...\n",
        "in": "header"
      }
    },
    "links": {},
    "callbacks": {}
  },
  "security": [
    {}
  ],
  "x-tagGroups": [
    {
      "name": "API",
      "tags": [
        "orders",
        "payments",
        "refunds",
        "payment-methods",
        "customers",
        "cards",
        "subscriptions",
        "webhooks",
        "search",
        "export",
        "brands"
      ]
    },
    {
      "name": "Masterpass",
      "tags": [
        "mp_session",
        "mp_card",
        "mp_data",
        "mp_errors"
      ]
    },
    {
      "name": "Дополнительно",
      "tags": [
        "webhook-handler",
        "widget",
        "test-cards",
        "errors"
      ]
    },
    {
      "name": "Changelog",
      "tags": [
        "changelog"
      ]
    }
  ],
  "tags": [
    {
      "name": "payment-methods",
      "x-displayName": "Платежные токены",
      "description": "Создание и управление платежными токенами."
    },
    {
      "name": "orders",
      "x-displayName": "Заказы",
      "description": "Создание и управление заказами."
    },
    {
      "name": "payments",
      "x-displayName": "Платежи",
      "description": "Регистрация и управление платежами."
    },
    {
      "name": "refunds",
      "x-displayName": "Возвраты",
      "description": "Создание и управление возвратами."
    },
    {
      "name": "customers",
      "x-displayName": "Плательщики",
      "description": "Создание и управление плательщиками."
    },
    {
      "name": "cards",
      "x-displayName": "Связки",
      "description": "Сохраненные карты плательщика."
    },
    {
      "name": "subscriptions",
      "x-displayName": "Подписки",
      "description": "Создание и управление подписками магазина."
    },
    {
      "name": "webhooks",
      "x-displayName": "Уведомления",
      "description": "Создание и управление webhook-ами.\n\nWebhook - уведомление о состоянии заказа или платежа."
    },
    {
      "name": "search",
      "x-displayName": "Поиск",
      "description": "Поиск заказов, платежей и возвратов по фильтрам."
    },
    {
      "name": "export",
      "x-displayName": "Отчеты",
      "description": "Выгрузка отчетов по заказам, платежам и возвратам в файл формата xlsx."
    },
    {
      "name": "brands",
      "x-displayName": "Информация по карте",
      "description": "Получение информации о платежной системе и банке-эмиттера по номеру карты (BIN)."
    },
    {
      "name": "health",
      "x-displayName": "Проверка статуса API",
      "description": "Проверка статуса API."
    },
    {
      "name": "mp_session",
      "x-displayName": "Сессия",
      "description": "Открытие сессиий Masterpass."
    },
    {
      "name": "mp_card",
      "x-displayName": "Платежный карты",
      "description": "Добавление и извлечение платежных карты из хранилища Masterpass."
    },
    {
      "name": "mp_data",
      "x-displayName": "Данные клиента",
      "description": "Изменение данных клиента в masterpass."
    },
    {
      "name": "mp_errors",
      "x-displayName": "Коды ошибок",
      "description": "## Ошибки бизнес-логики masterpass \nВсе ошибки бизнес-логики имеют следующий вид:\n\n  ```json\n  {\n    \"code\": \"string\",\n    \"message\": \"string\"\n  }\n  ```\n\nВ поле `code` содержится тип ошибки, а в `message` - дополнительная информация по произошедшей ошибке.\nНа данный момент существуют следующие коды ошибок:\n\n  | Код                              | Описание                                                                        |\n  | ---                              | --------                                                                        |\n  | **Unauthorized**                 | Не авторизован.                                                                 |\n  | **Forbidden**                    | Нет доступа.                                                                    |\n  | **InvalidRequest**               | Прочие неверные данные запроса.                                                 |\n  | **BadGateway**                   | Ошибка соединения со сторонним сервисом.                                        |\n | **ServiceAvailable**             | Услуга недоступна для этой карты / пользователя|\n| **CardNotActivated**                | Карта не активирована|\n| **CardNotFoundByToken**               | Карта не найдена по токену|\n| **CustomerNotFoundByPhone**               | Клиент с этим номером телефона не найден|\n| **CardExpiredDate**             | Попытка добавить карту с истекшим сроком действия|\n| **CardEncryptionError**             | Ошибка шифрования данных карты|\n| **DatabaseError**                | Ошибка сохранения в базе данных|\n| **WrongPhoneFormat**                | Неправильный формат телефона|\n| **DecryptionFileNotFound**             | При расшифровке файл не найден|\n| **TransactionAsFraud**              | Эта транзакция отмечена как мошенническая.|\n| **InternalError**                | Внутренняя ошибка при шифровании ответа|\n| **LimitCustomersPerCard**              | Превышен лимит количества клиентов на карту|\n| **LimitCardsPerCustomer**              | Превышен лимит количества карт на одного клиента.|\n| **MerchantNotFound**                | Продавец с таким именем не найден|\n| **SessionNotFound**             | Сессия не найдена или истекло время жизни|\n| **IncorrectAmountValue**                | Сумма <= 0|\n| **InvalidToken**             | Недопустимый токен карты|\n| **WrongParams**              | Неправильные параметры|\n| **AccessDenied**             | Доступ закрыт|\n| **FileIdNotReady**             | Файл еще не готов|\n| **ApiNotAllowed**               | API не разрешен|\n| **EmptyDeviceId**               | Пустой DeviceId|\n| **OtherError**               | Другая ошибка|\n"
    },
    {
      "name": "errors",
      "x-displayName": "Коды ошибок",
      "description": "## Ошибки бизнес-логики\nВсе ошибки бизнес-логики имеют следующий вид:\n\n  ```json\n  {\n    \"code\": \"string\",\n    \"message\": \"string\"\n  }\n  ```\n\nВ поле `code` содержится тип ошибки, а в `message` - дополнительная информация по произошедшей ошибке.\nНа данный момент существуют следующие коды ошибок:\n\n  | Код                                 | Описание                                                                        |\n  | ---                                 | --------                                                                        |\n  | **Unauthorized**                    | Не авторизован.                                                                 |\n  | **Forbidden**                       | Нет доступа.                                                                    |\n  | **InvalidRequest**                  | Прочие неверные данные запроса.                                                 |\n  | **BadGateway**                      | Ошибка соединения со сторонним сервисом.                                        |\n  | **OrderNotFound**                   | Заказ не найден. Может возникнуть при попытке [создания](#operation/CreatePayment) платежа по несуществующему `order_id`.  |\n  | **OrderExists**                     | Заказ с указанным `external_id` уже существует.  Может возникнуть при попытке повторного [создания](#operation/CreateOrder) заказа.                                 |\n  | **OrderUnpaid**                     | Заказ не оплачен. Может возникнуть при попытке [создания](#operation/CreateRefund) возврата.                                                        |\n  | **OrderHasApprovedPayment**         | У данного заказа уже есть авторизованный платеж. Может возникнуть при попытке повторного [создания](#operation/CreatePayment) платежа.                                                           |\n  | **OrderHasNoApprovedPayment**       | У данного заказа нет авторизованного платежа. Может возникнуть при попытке [подтверждения](#operation/CaptureOrder) неавторизованного заказа.                                                           |\n  | **OrderHasNoAttemptsLeftError**     | Исчерпано количество попыток оплаты. Может возникнуть при попытке повторного [создания](#operation/CreatePayment) платежа.                                                           |\n  | **OrderExpired**                    | Заказ просрочен. Может возникнуть при попытке [оплаты](#operation/CreatePayment) заказа с истекшим сроком действия `due_date`.|\n  | **PaymentNotFound**                 | Платеж не найден. Может возникнуть при попытке [отмены](#operation/CancelPayment) несуществующего платежа.|\n  | **RefundNotFound**                  | Возврат не найден. Может возникнуть при [запросе](#operation/GetRefundByID) несуществующего возврата.|\n  | **PaymentStarted**                  | Для указанного заказа уже запущен процесс платежа. Может возникнуть при попытке повторного [создания](#operation/CreatePayment) платежа. Содержит дополнительное поле `payment_id` - идентификатор запущенного ранее платежа.                            |\n  | **ProcessingDeadlineReachedError**  | Истекло время ожидания обработки платежа. Может возникнуть при попытке [создания](#operation/CreatePayment) платежа. Содержит дополнительное поле `payment_id` - идентификатор созданного платежа для дальнейшего запроса статуса [платежа](#operation/GetPaymentByID).                            |\n  | **PaymentCaptureAmountExceeded**    | Сумма списания больше авторизованной суммы. Может возникнуть при попытке [списания](#operation/CapturePayment) суммы, превышающей авторизованную.                                    | \n  | **PaymentRefundAmountExceededError**| Сумма возврата больше списанной суммы. Может возникнуть при попытке [создания](#operation/CreateRefund) возврата.                                    | \n  | **InvalidPaymentToken**             | Неверный платежный токен. Может возникнуть при попытке [создания](#operation/CreateCard) новой связки для плательщика.                                                  |\n  | **PaymentTokenNotFound**            | Платежный токен не найден. Может возникнуть при попытке [получения](#operation/GetPaymentMethod) платежных данных по неверному токену.|\n  | **CustomerNotFound**                | Плательщик не найден. Может возникнуть при попытке [создания](#operation/CreateCard) новой свзяки для несуществующего плательщика.|\n  | **CustomerExists**                  | Плательщик с таким `external_id` уже существует. Может возникнуть при попытке [создания](#operation/CreateCustomer) нового плательщика.                               |\n  | **CardNotFound**                    | Карта не найдена. Может возникнуть при попытке [получения](#operation/GetCardByID) данных сохраненной карты по неверному `card_id`.|\n  | **BindingStarted**                  | Для указанной карты уже запущен процесс привязки. Может возникнуть при попытке [создания](#operation/CreateCard) новой связки для плательщика.                      |\n  | **BindingNotFound**                 | Связка не найдена. Может возникнуть при попытке [создания](#operation/CreatePayment) платежа по несуществующей связке.|\n  | **WebhookNotFound**                 | Webhook не найден. Может возникнуть при попытке [получения](#operation/GetWebhookByID) webhook по ID.                                                            |\n  | **BinNotFound**                     | Информация по БИНу не найдена. Может возникнуть при попытке [поиска](#operation/GetEmitterByBinCode) информацию по карте.|\n\n## Ошибки обработки запросов\nВ процессе обработки запросов силами нашей платформы могут происходить различные непредвиденные ситуации. Об их появлении платформа сигнализирует по протоколу HTTP соответствующими [статусами][5xx], обозначающими ошибки сервера.\n\n  |  Код    |  Описание  |\n  | ------- | ---------- |\n  | **500** | В процессе обработки платформой запроса возникла непредвиденная ситуация. При получении подобного кода ответа мы рекомендуем обратиться в техническую поддержку. |\n  | **503** | Платформа временно недоступна и не готова обслуживать данный запрос. Запрос гарантированно не выполнен, при получении подобного кода ответа попробуйте выполнить его позднее, когда доступность платформы будет восстановлена. |\n  | **504** | Платформа превысила допустимое время обработки запроса, результат запроса не определён. Попробуйте отправить запрос повторно или выяснить результат выполнения исходного запроса, если повторное исполнение запроса нежелательно. |\n\n[5xx]: https://tools.ietf.org/html/rfc7231#section-6.6\n\n"
    },
    {
      "name": "test-cards",
      "x-displayName": "Тестовые карты",
      "description": "### Список тестовых карт для тестовой среды.\n\n Для карт, вовлеченных в 3D Secure, пароль на ACS: <b>12345678</b> \n\n| Описание | PAN | CVC | Срок годности | Результат |\n  | --  | -- | -- | -- | -- |\n  | Карта Visa c 3DS | 4111111111111111 | 123 | 12/2024 | Успешно после подтверждения 3DS |\n| Карта Mastercard | 5555555555555599 | 123 | 12/2024 | Успешно |\n| Карта Visa | 4444444444446666 | 123 | 12/2024 | Не успешно |\n| Карта Visa | 4444444411111111 | 123 | 12/2024 | Не успешно |\n\n"
    },
    {
      "name": "widget",
      "x-displayName": "Виджет для платежной формы",
      "description": "`ioka Widget`- это скрипт для интеграции платежной формы с кастомизацией её элементов.\nЧтобы добавить виджет на сайт, нужно:\n\nДобавить библиотеку ioka через CDN:\n```\n<script src=\"https://cdn.ioka.kz/ioka-widget-v2.js\"></script>\n```\nПри тестировании используйте https://cdn.ioka.kz/ioka-widget-v2-stage.js.\nДобавить элемент для отображения виджета (как можно ближе к body):\n```\n<div id='ioka-widget'></div> \n```\n Сделать инициализацию с заданными параметрами:\n```\nconst IokaWidgetItem = new IokaWidget({\n  orderId: <Идентификатор заказа>,\n  orderAccessToken: <Токен доступа к заказу>,\n  isSaveCard: <Открыть форму сохранения карты>,\n  customerId: <Идентификатор плательщика>,\n  customerAccessToken: <Токен доступа к плательщику>,\n  elementId: 'ioka-widget',\n  options: {},\n})\n```\nПривязать к нужной кнопке функцию вызова формы (например, кнопка “Сделать оплату”):\n```\nconst payFunction = () => {\n  IokaWidgetItem.initPayment()\n}\n```\nПараметры класса `IokaWidget`:\n\n`orderId` - Идентификатор заказа\n\n`orderAccessToken` - Токен доступа к заказу\n\n`isSaveCard` - Открыть форму сохранения карт (если значение false поля customerId и customerAccessToken могут быть пустыми)\n\n`customerId` - Идентификатор плательщика\n\n`customerAccessToken` - Токен доступа к плательщику\n\n`elementId` - ID HTML элемента, в котором будет рендериться виджет\n\n`options` - объект для дополнительных опций (подробности в таблице ниже)\n\n\n Параметры объекта `options`\n\n| Поле | Тип | Описание |\n  | --  | -- | -- |\n | onLoad |function| Ответит, загружена форма или нет |\n| onError | function | Вызывается в случае ошибки и возможности повторной оплаты |\n | onSuccess | function | Вызывается при успешной оплате |\n | onMessage | function | Вызывается в случае ошибки и возможности повторной оплаты |\n| widgetProps | object | Объект для кастомизации виджета |\n\n `widgetProps` принимает 2 объекта:\n\n `cardForm` - для кастомизации элементов рендера\n\n`styles` - для кастомизации стилей\n\nПараметры объекта `cardForm`\n \n\n| Поле | Тип | Описание |\n| -- | -- | -- |\n|hideResultMessages| boolean |Параметр, с помощью которого можно скрыть сообщение о результате оплаты, по умолчанию false. Также закрывает форму мгновенно после нажатия на кнопку *оплатить*, по умолчанию *false*|\n|title| string | Параметр, с помощью которого можно изменить заголовок|\n|hideBackButton| boolean |Параметр, с помощью которого можно скрыть *кнопку назад* (возврат на страницу продавца), по умолчанию *false*|\n|hideRetryButton| boolean |Параметр, с помощью которого можно скрыть *кнопку повтора*, по умолчанию *false*|\n|hideHeader| boolean |Параметр, с помощью которого можно скрыть шапку *Header*, по умолчанию *false*|\n|hideFooter| boolean |Параметр, с помощью которого можно скрыть подвал *Footer*|\n\nПараметры объекта `styles`\n\n\n| Поле | Тип | Описание |\n| -- | -- | -- |\n|cardFormContainer| object |Объект для изменения стилей контейнера формы оплаты|\n|cardHeader| object |Объект для изменения стилей *Header* (шапка)|\n|title| object | Объект для изменения стилей заголовка |\n|panContainer| object |Объект для изменения стилей контейнера номера карты |\n|expireAndCvcContainer| object |Объект для изменения стилей контейнера срока карты и CVC|\n|expireContainer| object |Объект для изменения стилей контейнера срока действия карты|\n|cvcContainer| object |Объект для изменения стилей контейнера CVC|\n|checkboxContainer| object |Объект для изменение стилей контейнера с двумя состояниями — ☑ включено и ☐ отключено |\n|checkboxLabel| object |Объект для изменение стилей текста *checkbox* |\n|inputsLabel| object |Объект для изменения стилей текстовых полей|\n|panInput| object |Объект для изменения стилей текстового поля номера карты|\n|expireInput| object |Объект для изменения стилей текстового поля срока действия карты|\n|cvcInput| object |Объект для изменения стилей текстового поля СVC карты|\n|button| object |Объект для изменения стилей кнопки|\n|secondaryButton| object |Объект для изменения стилей *кнопки назад*|\n|cardFooter| object |Объект для изменения стилей *Footer* (подвал)|\n|errorText| object |Объект для изменение стилей текста ошибок |\n\n### Примеры:\n\n<a href='/data/example_v2.html' download>Скачать готовые примеры</a> для тестирования виджета."
    },
    {
      "name": "changelog",
      "x-displayName": "Лог изменений",
      "description": "Хронологически упорядоченный список изменений для каждой версии API. Все значительные изменения в проекте будут задокументированы в этом файле.\n\nФормат основан на [Keep a Changelog](https://keepachangelog.com/ru/1.0.0/)\nи придерживается [Семантического Версионирования](https://semver.org/lang/ru/).\n\n##  2.8.0\n#### 2022-02-23\n### Добавлено\n- Метод [RefundOrder](#operation/RefundOrder). Создание нового возврата по списанному платежу. Shortcut для метода [CreateRefund](#operation/CreateRefund).\n- Метод [GetOrderRefunds](#operation/GetOrderRefunds). Выдача всех возвратов по списанному платежу.\n- Метод [GetOrderRefundByID](#operation/GetOrderRefundByID). Выдача возврата по идентификатору.\n- Опциональный параметр `attempts` при создании [заказа](#operation/CreateOrder)\n\n### Изменено\n- Метод [CaptureOrder](#operation/CaptureOrder) возвращает status_code `200` c данными о платеже. \n- Метод [CancelOrder](#operation/CancelOrder) возвращает status_code `200` c данными о платеже.\n\n##  2.7.0\n#### 2022-02-17\n### Добавлено\n- Метод [CaptureOrder](#operation/CaptureOrder). Полное или частичное списание авторизованного платежа заказа. Shortcut для метода [CapturePayment](#operation/CapturePayment).\n- Метод [CancelOrder](#operation/CancelOrder). Отмена авторизованного платежа заказа. Shortcut для метода CancelPayment [CancelPayment](#operation/CancelPayment).\n- Промежуточный статус заказа -`ON_HOLD`. Присваивается при наличии успешно авторизованного платежа.\n\n\n##  2.6.0\n#### 2022-02-15\n### Добавлено\n- Метод [CreateBinding](#operation/CreateBinding).\n- Параметр **cvc_required** (Необходимость ввода cvc при оплате) в ответе на метод [GetCardByID](#operation/GetCardByID).\n\n\n##  2.5.0\n#### 2022-02-03\n### Добавлено\n- Метод [CreateCardPayment](#operation/CreateCardPayment).\n- Параметр **checkout_url** (ссылка на форму сохранения карты) в методе [CreateCustomer](#operation/CreateCustomer).\n\n### Удалено\n- Параметры **session** из payment_method и **customer_id** из customer_card в методе [CreatePayment](#operation/CreatePayment).\n\n\n##  2.4.0\n#### 2021-12-30\n### Добавлено\n- Методы [GetOrders](#operation/GetOrders), [GetPayments](#operation/GetPayments), [GetRefunds](#operation/GetRefunds), [GetSubscriptions](#operation/GetSubscriptions), [GetCustomers](#operation/GetCustomers).\n\n### Удалено\n- Авторизация с **order_access_token** из метода [CreatePaymentMethod](#operation/CreatePaymentMethod).\n\n\n##  2.3.0\n#### 2021-12-23\n### Добавлено\n- Столбец 'Дополнительно' (extra_info) в выгрузке отчетов по [заказам](#operation/ExportOrders).\n\n### Удалено\n- Метод CreateCustomerAccessToken.\n- Авторизация с **customer_access_token** из методов [GetCustomerEvents](#operation/GetCustomerEvents), [GetCustomerByID](#operation/GetCustomerByID), [CreateCard](#operation/CreateCard), [GetCardByID](#operation/GetCardByID).\n- Метод CreateOrderAccessToken.\n- Авторизация с **order_access_token** из методов [GetOrderByID](#operation/GetOrderByID), [GetOrderEvents](#operation/GetOrderEvents), [CreatePayment](#operation/CreatePayment).\n\n##  2.2.0\n#### 2021-12-09\n### Добавлено\n- Группа методов для управления [подписками](#tag/subscriptions).\n- Параметры **customer_id**, **card_id** в методе [CreateOrder](#operation/CreateOrder) для оплаты по сохраненной карте через форму оплаты с подтверждением CVC.\n- Детальное описание ошибки платежа **PaymentError** в схеме PaymentOut.\n\n### Изменено\n- Параметр **amount** во всех методах оплаты (например [CreateOrder](#operation/CreateOrder)) должен быть не менее 1.\n\n##  2.1.0 \n#### 2021-11-25\n### Добавлено\n- Метод [DeleteCardByID](#operation/DeleteCardByID) для удаления сохраненной карты по ID\n- Методы [ExportOrders](#operation/ExportOrders), [ExportPayments](#operation/ExportPayments), [ExportRefunds](#operation/ExportRefunds) для выгрузки отчетов\n- Схемы **PaginatedOrderOut**, **PaginatedPaymentOut**, **PaginatedRefundOut** в методах [поиска](#tag/search) для разделения списка на странцы\n- Параметры **page**, **limit** в методах [SearchOrders](#operation/SearchOrders), [SearchPayments](#operation/SearchPayments), [SearchRefunds](#operation/SearchRefunds)\n\n### Изменено\n- Параметр **to_dt** стал необязательным в методах [SearchOrders](#operation/SearchOrders), [SearchPayments](#operation/SearchPayments), [SearchRefunds](#operation/SearchRefunds)\n"
    },
    {
      "name": "webhook-handler",
      "x-displayName": "Обработка уведомлений о событиях",
      "description": "[Уведомление о событиях](https://ioka.kz/documentation/quick-start/notifications)"
    }
  ],
  "externalDocs": {
  }
}